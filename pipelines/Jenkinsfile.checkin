pipeline {
    agent any
    
    // Check-in触发器 - 代码提交时自动触发
    triggers {
        pollSCM('H/2 * * * *')  // 每2分钟检查一次代码变化
    }
    
    // Check-in参数
    parameters {
        string(
            name: 'TEST_SCRIPT_NAME',
            defaultValue: 'check_in_test.py',
            description: '要执行的测试脚本名称 (如: xxxx.py)'
        )
        choice(
            name: 'TEST_ENV',
            choices: ['dev', 'test', 'staging'],
            description: '测试环境'
        )
        booleanParam(
            name: 'GENERATE_ALLURE',
            defaultValue: true,
            description: '是否生成Allure报告'
        )
        booleanParam(
            name: 'CLEAN_WORKSPACE',
            defaultValue: false,
            description: '运行前清理工作空间'
        )
        string(
            name: 'PYTHON_VERSION',
            defaultValue: 'python3',
            description: 'Python版本 (python/python3)'
        )
    }
    
    // 环境变量
    environment {
        APP_NAME = 'jenkins-checkin-test'
        BUILD_TYPE = 'check-in-test'
        BUILD_TIME = "${new Date().format('yyyy-MM-dd HH:mm:ss')}"
        ALLURE_RESULTS_DIR = 'allure-results'
        ALLURE_REPORT_DIR = 'allure-report'
        TEST_REPORTS_DIR = 'test-reports'
        // Ubuntu环境优化
        DEBIAN_FRONTEND = 'noninteractive'
        LANG = 'C.UTF-8'
        LC_ALL = 'C.UTF-8'
    }
    
    stages {
        stage('� Check-in 测试初始化') {
            steps {
                script {
                    echo "🚀 开始 Check-in 测试流程"
                    echo "项目: ${env.APP_NAME}"
                    echo "构建类型: ${env.BUILD_TYPE}"
                    echo "构建时间: ${env.BUILD_TIME}"
                    echo "测试脚本: ${params.TEST_SCRIPT_NAME}"
                    echo "测试环境: ${params.TEST_ENV}"
                    echo "Python版本: ${params.PYTHON_VERSION}"
                    
                    // 设置构建描述
                    currentBuild.description = "Check-in Test - ${params.TEST_SCRIPT_NAME} (${params.TEST_ENV})"
                    
                    // 清理工作空间
                    if (params.CLEAN_WORKSPACE) {
                        echo "🧹 清理工作空间..."
                        cleanWs()
                    }
                }
            }
        }
        
        stage('📥 拉取测试代码') {
            steps {
                script {
                    echo "📥 从指定仓库拉取测试代码..."
                    echo "🏠 当前工作空间：${env.WORKSPACE}"
                }
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'http://110.41.2.77:9999/haley/Android-automation-script.git',
                        credentialsId: 'gitea-api'
                    ]]
                ])
                script {
                    echo "📂 代码拉取完成，文件列表："
                    sh "ls -la"
                    echo "📁 测试代码位置：${env.WORKSPACE}"
                    // 获取Git信息
                    try {
                        env.GIT_COMMIT_SHORT = env.GIT_COMMIT?.take(8) ?: 'unknown'
                        env.GIT_BRANCH_NAME = env.GIT_BRANCH ?: 'unknown'
                        env.GIT_AUTHOR = env.CHANGE_AUTHOR ?: 'unknown'
                        
                        echo "分支: ${env.GIT_BRANCH_NAME}"
                        echo "提交: ${env.GIT_COMMIT_SHORT}"
                        echo "作者: ${env.GIT_AUTHOR}"
                        
                        // 验证测试脚本是否存在 (Ubuntu优化)
                        def scriptExists = sh(script: "test -f ${params.TEST_SCRIPT_NAME} && echo 'exists' || echo 'not_found'", returnStdout: true).trim()
                        if (scriptExists == 'not_found') {
                            echo "⚠️ 警告: 测试脚本 ${params.TEST_SCRIPT_NAME} 不存在，将使用模拟测试"
                            env.SCRIPT_EXISTS = 'false'
                        } else {
                            echo "✅ 找到测试脚本: ${params.TEST_SCRIPT_NAME}"
                            
                            // 检查脚本权限
                            def executable = sh(script: "test -x ${params.TEST_SCRIPT_NAME} && echo 'true' || echo 'false'", returnStdout: true).trim()
                            if (executable == 'false') {
                                echo "🔧 设置脚本执行权限..."
                                sh "chmod +x ${params.TEST_SCRIPT_NAME}"
                            }
                            
                            env.SCRIPT_EXISTS = 'true'
                        }
                    } catch (Exception e) {
                        echo "获取Git信息失败: ${e.getMessage()}"
                        env.GIT_COMMIT_SHORT = 'unknown'
                        env.GIT_BRANCH_NAME = 'unknown'
                        env.GIT_AUTHOR = 'unknown'
                        env.SCRIPT_EXISTS = 'false'
                    }
                    
                    // Python虚拟环境激活和依赖安装
                    echo "🐍 激活Python虚拟环境..."
                    try {
                        // 检查是否存在虚拟环境目录
                        def venvExists = sh(script: "test -d venv && echo 'exists' || echo 'not_found'", returnStdout: true).trim()
                        if (venvExists == 'not_found') {
                            echo "📦 创建Python虚拟环境..."
                            sh "${params.PYTHON_VERSION} -m venv venv"
                        } else {
                            echo "✅ 虚拟环境已存在"
                        }
                        
                        // 激活虚拟环境并检查Python版本
                        echo "🔗 激活虚拟环境并检查Python版本..."
                        sh """
                            source venv/bin/activate
                            python --version
                            pip --version
                        """
                        
                        echo "⏭️ 跳过依赖安装步骤"
                        echo "📋 如需安装依赖，请手动执行或修改pipeline配置"
                        
                        // 验证虚拟环境状态
                        echo "� 虚拟环境基本信息："
                        sh """
                            source venv/bin/activate
                            echo "Python路径: \$(which python)"
                            echo "Pip路径: \$(which pip)"
                            echo "虚拟环境目录: \$(pwd)/venv"
                        """
                        
                        env.VENV_ACTIVATED = 'true'
                        echo "✅ Python虚拟环境准备完成"
                        
                    } catch (Exception e) {
                        echo "❌ Python虚拟环境激活失败: ${e.getMessage()}"
                        env.VENV_ACTIVATED = 'false'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🔧 环境准备') {
            steps {
                script {
                    echo "🔧 准备Ubuntu测试环境..."
                    
                    // 显示系统信息
                    echo "�️ 系统信息："
                    sh "uname -a"
                    
                    // 检查虚拟环境状态
                    if (env.VENV_ACTIVATED == 'true') {
                        echo "✅ Python虚拟环境已激活"
                        sh """
                            source venv/bin/activate
                            echo "Python路径: \$(which python)"
                            echo "Pip路径: \$(which pip)"
                            python --version
                        """
                    } else {
                        echo "⚠️ Python虚拟环境未激活，使用系统Python"
                        sh """
                            echo "系统Python路径: \$(which ${params.PYTHON_VERSION})"
                            ${params.PYTHON_VERSION} --version
                        """
                    }
                    
                    // 检查Android相关环境（如果需要）
                    echo "📱 检查Android环境..."
                    try {
                        sh "adb version || echo 'ADB未安装'"
                    } catch (Exception e) {
                        echo "⚠️ ADB检查失败: ${e.getMessage()}"
                    }
                    
                    echo "✅ Ubuntu环境准备完成"
                }
            }
        }
        
        stage('🧪 执行Check-in测试') {
            steps {
                script {
                    echo "🧪 开始Check-in测试准备工作..."
                    
                    try {
                        // 检查test_case目录是否存在
                        def testCaseDirExists = sh(script: "test -d test_case && echo 'exists' || echo 'not_found'", returnStdout: true).trim()
                        
                        if (testCaseDirExists == 'exists') {
                            echo "� 找到test_case目录，列出所有测试脚本："
                            sh """
                                echo "📂 test_case目录内容："
                                ls -la test_case/
                                echo ""
                                echo "🐍 Python测试脚本(.py文件)："
                                find test_case -name "*.py" -type f | sort
                                echo ""
                                echo "� 脚本统计："
                                echo "总文件数: \$(find test_case -type f | wc -l)"
                                echo "Python脚本数: \$(find test_case -name "*.py" -type f | wc -l)"
                                echo "其他文件数: \$(find test_case -type f ! -name "*.py" | wc -l)"
                            """
                        } else {
                            echo "⚠️ 未找到test_case目录，检查根目录下的Python文件："
                            sh """
                                echo "📂 根目录Python文件："
                                find . -maxdepth 1 -name "*.py" -type f | sort
                                echo ""
                                echo "� 所有目录："
                                find . -maxdepth 1 -type d | sort
                            """
                        }
                        
                        // 检查指定的测试脚本
                        if (env.SCRIPT_EXISTS == 'true') {
                            echo "✅ 指定的测试脚本存在: ${params.TEST_SCRIPT_NAME}"
                            sh """
                                echo "📄 脚本详细信息："
                                ls -la ${params.TEST_SCRIPT_NAME}
                                echo "📝 脚本前10行内容："
                                head -n 10 ${params.TEST_SCRIPT_NAME}
                            """
                        } else {
                            echo "⚠️ 指定的测试脚本不存在: ${params.TEST_SCRIPT_NAME}"
                        }
                        
                        echo "✅ 测试脚本检查完成"
                        echo "🔄 暂时跳过脚本执行，仅进行环境检查"
                        
                    } catch (Exception e) {
                        echo "❌ 测试脚本检查失败: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('📊 发布Allure报告') {
            when {
                expression { params.GENERATE_ALLURE }
            }
            steps {
                script {
                    echo "📊 发布Allure测试报告到Jenkins..."
                    echo "🔍 这里会检查测试结果文件，创建Allure报告，并使用Jenkins Allure插件发布"
                    
                    try {
                        // 使用Jenkins Allure插件发布报告
                        allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: env.ALLURE_RESULTS_DIR]]
                        ])
                        
                        echo "✅ Allure报告已发布到Jenkins"
                        
                    } catch (Exception e) {
                        echo "⚠️ Allure报告发布失败: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
            post {
                always {
                    // 归档测试结果文件
                    archiveArtifacts artifacts: "${env.ALLURE_RESULTS_DIR}/**/*", allowEmptyArchive: true, fingerprint: true
                    archiveArtifacts artifacts: "${env.TEST_REPORTS_DIR}/**/*", allowEmptyArchive: true, fingerprint: true
                }
            }
        }
        
        stage('📝 Check-in 测试报告') {
            steps {
                script {
                    def duration = currentBuild.duration ?: 0
                    def status = currentBuild.result ?: 'SUCCESS'
                    
                    def report = """
                    📋 Check-in 测试报告
                    ========================
                    项目: ${env.APP_NAME}
                    测试脚本: ${params.TEST_SCRIPT_NAME}
                    测试环境: ${params.TEST_ENV}
                    分支: ${env.GIT_BRANCH_NAME}
                    提交: ${env.GIT_COMMIT_SHORT}
                    作者: ${env.GIT_AUTHOR}
                    状态: ${status}
                    耗时: ${duration}ms
                    Python版本: ${params.PYTHON_VERSION}
                    Allure报告: ${params.GENERATE_ALLURE ? '已生成' : '已跳过'}
                    构建时间: ${env.BUILD_TIME}
                    构建号: ${env.BUILD_NUMBER}
                    """
                    
                    echo report
                    
                    // 测试结果分析
                    if (status == 'SUCCESS') {
                        echo "✅ Check-in 测试成功！"
                        echo "📊 所有测试步骤已完成"
                        if (params.GENERATE_ALLURE) {
                            echo "📋 Allure报告已发布，可在构建页面查看"
                        }
                    } else if (status == 'UNSTABLE') {
                        echo "⚠️ Check-in 测试不稳定"
                        echo "某些步骤可能失败，但测试已完成"
                    } else {
                        echo "❌ Check-in 测试失败"
                        echo "请检查测试脚本和环境配置"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "🏁 Check-in 测试流程完成"
                
                // 记录构建信息
                def buildInfo = [
                    'script': params.TEST_SCRIPT_NAME,
                    'environment': params.TEST_ENV,
                    'branch': env.GIT_BRANCH_NAME,
                    'commit': env.GIT_COMMIT_SHORT,
                    'author': env.GIT_AUTHOR,
                    'result': currentBuild.result ?: 'SUCCESS',
                    'duration': currentBuild.duration ?: 0,
                    'python_version': params.PYTHON_VERSION,
                    'allure_generated': params.GENERATE_ALLURE
                ]
                
                echo "构建信息: ${buildInfo}"
                
                // 清理临时文件 (可选)
                if (params.CLEAN_WORKSPACE) {
                    echo "🧹 这里会清理临时文件和工作空间"
                }
            }
        }
        
        success {
            script {
                echo "✅ Check-in 测试成功！"
                echo "🎉 测试脚本 ${params.TEST_SCRIPT_NAME} 执行完成"
                if (params.GENERATE_ALLURE) {
                    echo "📊 Allure报告已生成，可在Jenkins构建页面查看"
                }
                echo "🚀 代码可以安全提交或合并"
                
                // 可以添加成功通知
                // 例如：发送Slack消息、更新Git状态、发送邮件等
            }
        }
        
        failure {
            script {
                echo "❌ Check-in 测试失败！"
                echo "💥 测试脚本 ${params.TEST_SCRIPT_NAME} 执行失败"
                echo "🔍 请检查以下内容:"
                echo "   - 测试脚本是否存在: ${params.TEST_SCRIPT_NAME}"
                echo "   - Python环境是否正确: ${params.PYTHON_VERSION}"
                echo "   - 测试环境是否可用: ${params.TEST_ENV}"
                echo "   - 依赖包是否已安装"
                
                // 可以添加失败通知
                // 例如：发送邮件给开发者、创建Jira ticket、发送钉钉消息等
            }
        }
        
        unstable {
            script {
                echo "⚠️ Check-in 测试不稳定"
                echo "📋 部分测试可能失败，但流程已完成"
                echo "🔧 建议检查测试结果和Allure报告"
            }
        }
        
        aborted {
            script {
                echo "🛑 Check-in 测试被中止"
                echo "⏹️ Pipeline 执行被用户或系统中止"
                echo "🔄 可以重新触发构建"
            }
        }
    }
}
