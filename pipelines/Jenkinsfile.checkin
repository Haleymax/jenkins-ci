pipeline {
    agent any
    
    // Check-in触发器 - 代码提交时自动触发
    triggers {
        pollSCM('H/2 * * * *')  // 每2分钟检查一次代码变化
    }
    
    // Check-in参数 - 保持简单
    parameters {
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: '是否跳过测试'
        )
        booleanParam(
            name: 'FAST_BUILD',
            defaultValue: true,
            description: '快速构建模式'
        )
    }
    
    // 环境变量
    environment {
        APP_NAME = 'jenkins-checkin-app'
        BUILD_TYPE = 'check-in'
        BUILD_TIME = "${new Date().format('yyyy-MM-dd HH:mm:ss')}"
    }
    
    stages {
        stage('📋 Check-in 初始化') {
            steps {
                script {
                    echo "🚀 开始 Check-in Pipeline"
                    echo "项目: ${env.APP_NAME}"
                    echo "构建类型: ${env.BUILD_TYPE}"
                    echo "构建时间: ${env.BUILD_TIME}"
                    echo "快速模式: ${params.FAST_BUILD}"
                    
                    // 设置构建描述
                    currentBuild.description = "Check-in Build - ${env.GIT_BRANCH}"
                }
            }
        }
        
        stage('📥 代码检出') {
            steps {
                checkout scm
                script {
                    // 获取Git信息
                    try {
                        env.GIT_COMMIT_SHORT = env.GIT_COMMIT?.take(8) ?: 'unknown'
                        env.GIT_BRANCH_NAME = env.GIT_BRANCH ?: 'unknown'
                        env.GIT_AUTHOR = env.CHANGE_AUTHOR ?: 'unknown'
                        
                        echo "分支: ${env.GIT_BRANCH_NAME}"
                        echo "提交: ${env.GIT_COMMIT_SHORT}"
                        echo "作者: ${env.GIT_AUTHOR}"
                    } catch (Exception e) {
                        echo "获取Git信息失败: ${e.getMessage()}"
                        env.GIT_COMMIT_SHORT = 'unknown'
                        env.GIT_BRANCH_NAME = 'unknown'
                        env.GIT_AUTHOR = 'unknown'
                    }
                }
            }
        }
        
        stage('🔍 代码检查') {
            parallel {
                stage('语法检查') {
                    steps {
                        script {
                            echo "执行代码语法检查..."
                            // 模拟语法检查
                            sleep(1)
                            echo "✅ 语法检查通过"
                        }
                    }
                }
                stage('代码风格') {
                    steps {
                        script {
                            echo "检查代码风格..."
                            // 模拟代码风格检查
                            sleep(1)
                            echo "✅ 代码风格检查通过"
                        }
                    }
                }
                stage('安全扫描') {
                    steps {
                        script {
                            echo "执行安全扫描..."
                            // 模拟安全扫描
                            sleep(1)
                            echo "✅ 安全扫描通过"
                        }
                    }
                }
            }
        }
        
        stage('🔨 快速构建') {
            steps {
                script {
                    if (params.FAST_BUILD) {
                        echo "执行快速构建..."
                        sleep(2)
                    } else {
                        echo "执行完整构建..."
                        sleep(5)
                    }
                    echo "✅ 构建完成"
                }
            }
        }
        
        stage('🧪 快速测试') {
            when {
                expression { !params.SKIP_TESTS }
            }
            parallel {
                stage('单元测试') {
                    steps {
                        script {
                            echo "运行核心单元测试..."
                            // 只运行关键的单元测试
                            sleep(3)
                            echo "✅ 单元测试通过"
                        }
                    }
                }
                stage('集成测试') {
                    when {
                        expression { !params.FAST_BUILD }
                    }
                    steps {
                        script {
                            echo "运行关键集成测试..."
                            sleep(2)
                            echo "✅ 集成测试通过"
                        }
                    }
                }
            }
        }
        
        stage('📊 质量检查') {
            steps {
                script {
                    echo "执行代码质量检查..."
                    
                    // 模拟质量检查结果
                    def qualityReport = [
                        'coverage': 78,
                        'duplicated_lines': 5,
                        'bugs': 0,
                        'vulnerabilities': 0,
                        'code_smells': 2
                    ]
                    
                    echo "代码覆盖率: ${qualityReport.coverage}%"
                    echo "重复代码: ${qualityReport.duplicated_lines}%"
                    echo "Bug数量: ${qualityReport.bugs}"
                    echo "安全漏洞: ${qualityReport.vulnerabilities}"
                    echo "代码异味: ${qualityReport.code_smells}"
                    
                    // 质量门检查
                    if (qualityReport.bugs > 0) {
                        error("❌ 发现 ${qualityReport.bugs} 个Bug，请修复后再提交")
                    }
                    if (qualityReport.vulnerabilities > 0) {
                        error("❌ 发现 ${qualityReport.vulnerabilities} 个安全漏洞，请修复后再提交")
                    }
                    if (qualityReport.coverage < 70) {
                        currentBuild.result = 'UNSTABLE'
                        echo "⚠️ 代码覆盖率低于70%，建议增加测试"
                    }
                    
                    echo "✅ 质量检查通过"
                }
            }
        }
        
        stage('📝 Check-in 报告') {
            steps {
                script {
                    def duration = currentBuild.duration ?: 0
                    def status = currentBuild.result ?: 'SUCCESS'
                    
                    def report = """
                    📋 Check-in Pipeline 报告
                    ========================
                    项目: ${env.APP_NAME}
                    分支: ${env.GIT_BRANCH_NAME}
                    提交: ${env.GIT_COMMIT_SHORT}
                    作者: ${env.GIT_AUTHOR}
                    状态: ${status}
                    耗时: ${duration}ms
                    模式: ${params.FAST_BUILD ? '快速模式' : '完整模式'}
                    测试: ${params.SKIP_TESTS ? '已跳过' : '已执行'}
                    时间: ${env.BUILD_TIME}
                    """
                    
                    echo report
                    
                    // 可以在这里添加通知逻辑
                    if (status == 'SUCCESS') {
                        echo "✅ Check-in 验证成功，代码可以安全提交"
                    } else {
                        echo "⚠️ Check-in 验证存在问题，请检查并修复"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "🏁 Check-in Pipeline 完成"
                
                // 记录构建信息
                def buildInfo = [
                    'branch': env.GIT_BRANCH_NAME,
                    'commit': env.GIT_COMMIT_SHORT,
                    'author': env.GIT_AUTHOR,
                    'result': currentBuild.result ?: 'SUCCESS',
                    'duration': currentBuild.duration ?: 0
                ]
                
                echo "构建信息: ${buildInfo}"
            }
        }
        
        success {
            script {
                echo "✅ Check-in 成功!"
                echo "代码质量验证通过，可以继续开发或合并"
                
                // 可以添加成功通知
                // 例如：发送Slack消息、更新Git状态等
            }
        }
        
        failure {
            script {
                echo "❌ Check-in 失败!"
                echo "请修复问题后重新提交代码"
                
                // 可以添加失败通知
                // 例如：发送邮件给提交者、创建Jira ticket等
            }
        }
        
        unstable {
            script {
                echo "⚠️ Check-in 不稳定"
                echo "代码可以提交，但建议改进质量"
            }
        }
        
        aborted {
            script {
                echo "🛑 Check-in 被中止"
                echo "Pipeline 执行被用户或系统中止"
            }
        }
    }
}
